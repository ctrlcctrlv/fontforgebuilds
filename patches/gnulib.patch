From 0058974abdb9d3bbe00cb9bb5d389c0e583f3ef1 Mon Sep 17 00:00:00 2001
From: Jeremy Tan <jtanx@outlook.com>
Date: Mon, 18 May 2015 22:07:36 +0800
Subject: [PATCH] Reorder the check for gethostname if Winsock is present.

---
 m4/gethostname.m4 | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/m4/gethostname.m4 b/m4/gethostname.m4
index 0721697..4c47061 100644
--- a/m4/gethostname.m4
+++ b/m4/gethostname.m4
@@ -15,8 +15,7 @@ AC_DEFUN([gl_FUNC_GETHOSTNAME],
   dnl Where is gethostname() defined?
   dnl - On native Windows, it is in ws2_32.dll.
   dnl - Otherwise it is in libc.
-  GETHOSTNAME_LIB=
-  AC_CHECK_FUNCS([gethostname], , [
+  if test $UNISTD_H_HAVE_WINSOCK2_H = 1; then
     AC_CACHE_CHECK([for gethostname in winsock2.h and -lws2_32],
       [gl_cv_w32_gethostname],
       [gl_cv_w32_gethostname=no
@@ -29,14 +28,18 @@ AC_DEFUN([gl_FUNC_GETHOSTNAME],
 #include <stddef.h>
 ]], [[gethostname(NULL, 0);]])], [gl_cv_w32_gethostname=yes])
        LIBS="$gl_save_LIBS"
-      ])
-    if test "$gl_cv_w32_gethostname" = "yes"; then
-      GETHOSTNAME_LIB="-lws2_32"
-    fi
-  ])
+    ])
+  fi
+
+  GETHOSTNAME_LIB=
+  if test "$gl_cv_w32_gethostname" = "yes"; then
+    GETHOSTNAME_LIB="-lws2_32"
+  else
+    AC_CHECK_FUNCS([gethostname])
+  fi
   AC_SUBST([GETHOSTNAME_LIB])

-  if test "$ac_cv_func_gethostname" = no; then
+  if test "x$ac_cv_func_gethostname" != "xyes"; then
     HAVE_GETHOSTNAME=0
   fi

--
2.4.1


From 80344517a6532a5d0e6222b594481bf243c883d8 Mon Sep 17 00:00:00 2001
From: Jeremy Tan <jtanx@outlook.com>
Date: Sat, 29 Dec 2018 08:43:14 +0800
Subject: [PATCH] Enable Unicode support for open and fopen on Windows


diff --git a/lib/fopen.c b/lib/fopen.c
index 2c9a75d0b..67f9040d4 100644
--- a/lib/fopen.c
+++ b/lib/fopen.c
@@ -24,12 +24,53 @@
 
 /* Get the original definition of fopen.  It might be defined as a macro.  */
 #include <stdio.h>
+#include <errno.h>
+/* Get the character set conversion functions for Windows. */
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+# include <limits.h>
+# include <Stringapiset.h>
+#endif
 #undef __need_FILE
 
 static FILE *
 orig_fopen (const char *filename, const char *mode)
 {
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+# define MAX_MODE 20
+  wchar_t rpl_filename[MAX_PATH], rpl_mode[MAX_MODE];
+  size_t i;
+
+  if (MultiByteToWideChar (CP_UTF8, MB_ERR_INVALID_CHARS, filename, -1,
+                           rpl_filename, MAX_PATH) == 0)
+    {
+      errno = EINVAL;
+      return NULL;
+    }
+  if (MultiByteToWideChar (CP_UTF8, MB_ERR_INVALID_CHARS, mode, -1,
+                           rpl_mode, MAX_MODE) == 0)
+    {
+      errno = EINVAL;
+      return NULL;
+    }
+  for (i = 0; rpl_mode[i] && rpl_mode[i] != L'b'; i++);
+
+  if (rpl_mode[i] == L'\0')
+    {
+      if (i+1 < MAX_MODE)
+        {
+          rpl_mode[i++] = L'b';
+          rpl_mode[i] = L'\0';
+        }
+      else
+        {
+          errno = EINVAL;
+          return NULL;
+        }
+    }
+  return _wfopen (rpl_filename, rpl_mode);
+#else
   return fopen (filename, mode);
+#endif
 }
 
 /* Specification.  */
@@ -37,7 +78,6 @@ orig_fopen (const char *filename, const char *mode)
    this include because of the preliminary #include <stdio.h> above.  */
 #include "stdio.h"
 
-#include <errno.h>
 #include <fcntl.h>
 #include <string.h>
 #include <unistd.h>
diff --git a/lib/open.c b/lib/open.c
index 792e258ba..e2dff5cd1 100644
--- a/lib/open.c
+++ b/lib/open.c
@@ -24,13 +24,30 @@
 
 /* Get the original definition of open.  It might be defined as a macro.  */
 #include <fcntl.h>
+#include <errno.h>
 #include <sys/types.h>
+/* Get the character set conversion functions for Windows. */
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+# include <limits.h>
+# include <Stringapiset.h>
+#endif
 #undef __need_system_fcntl_h
 
 static int
 orig_open (const char *filename, int flags, mode_t mode)
 {
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+  wchar_t rpl_filename[MAX_PATH];
+  if (MultiByteToWideChar (CP_UTF8, MB_ERR_INVALID_CHARS, filename, -1,
+                           rpl_filename, MAX_PATH) == 0)
+    {
+      errno = EINVAL;
+      return -1;
+    }
+  return _wopen (rpl_filename, flags, mode|_O_BINARY);
+#else
   return open (filename, flags, mode);
+#endif
 }
 
 /* Specification.  */
@@ -40,7 +57,6 @@ orig_open (const char *filename, int flags, mode_t mode)
 
 #include "cloexec.h"
 
-#include <errno.h>
 #include <stdarg.h>
 #include <string.h>
 #include <sys/types.h>
-- 
2.19.2

